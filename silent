getgenv().NasEbk = {
    ['KOCheck'] = true,
    ['Silent Aim'] = {
        ['Enabled'] = true,
        ['Prediction'] = 0.122,
        ['Part'] = "HumanoidRootPart", -- too lazy to add closest part
        ['Nearest Point'] = true,
        ['Nearest Point Mode'] = "Full", -- options are Generic, Full, Partial, Scalar
        ['EnableJumpPart'] = false,
        ['JumpPart'] = "Head",
        ['Field Of View'] = {
            ['Visible'] = true,
            ['Color'] = Color3.new(255, 255, 255),
            ['Radius'] = 180,
            ['Transparency'] = 0.07
        },
        ['Resolver'] = {
            ['Enabled'] = true, -- current settings not recommended with nearest point
            ['Smoothing'] = 0.025,
            ['Process'] = 0.1,
            ['Measurement'] = 0.1,
            ['Estimate'] = 1,
        }
    }
}

local players = game.Players
local lp = players.LocalPlayer
local rs = game:GetService("RunService")
local p = getgenv().NasEbk
local m = lp:GetMouse()
local c = workspace.CurrentCamera
local SilentTarget = nil

local Circle = Drawing.new("Circle")

getgenv().NasEbk_Connections = {}

-- Clamp function
local function Clamp(value, min, max)
    return math.max(min, math.min(value, max))
end

-- Nearest Point function (unchanged)
local function GetNearestPointOnTarget(Target)
    local LocalMouse = lp:GetMouse()
    local HitPosition = LocalMouse.Hit.Position
    local NearestPosition = nil
    local MinDistance = math.huge

    -- Iterate through all parts of the target
    for _, part in pairs(Target.Character:GetChildren()) do
        if part:IsA("BasePart") then
            local PartCenter = part.Position
            local PartSize = part.Size
            local Half = PartSize / 2

            local NearestPoint
            local Type = p['Silent Aim']['Nearest Point Mode']

            if Type == "Generic" then
                NearestPoint = Vector3.new(
                    Clamp(HitPosition.X, PartCenter.X - Half.X, PartCenter.X + Half.X),
                    Clamp(HitPosition.Y, PartCenter.Y - Half.Y, PartCenter.Y + Half.Y),
                    Clamp(HitPosition.Z, PartCenter.Z - Half.Z, PartCenter.Z + Half.Z)
                )
            elseif Type == "Full" then
                local Transform = part.CFrame:PointToObjectSpace(HitPosition)
                NearestPoint = part.CFrame * Vector3.new(
                    Clamp(Transform.X, -Half.X, Half.X),
                    Clamp(Transform.Y, -Half.Y, Half.Y),
                    Clamp(Transform.Z, -Half.Z, Half.Z)
                )
            elseif Type == "Partial" then
                local LocalPosition = part.CFrame:pointToObjectSpace(HitPosition)
                local Size = PartSize / 2
                local x = Clamp(LocalPosition.X, -Size.X, Size.X)
                local y = Clamp(LocalPosition.Y, -Size.Y, Size.Y)
                local z = Clamp(LocalPosition.Z, -Size.Z, Size.Z)
                NearestPoint = part.CFrame:pointToWorldSpace(Vector3.new(x, y, z))
            elseif Type == "Scalar" then
                local Transform = part.CFrame:PointToObjectSpace(HitPosition)
                NearestPoint = part.CFrame * Vector3.new(
                    Clamp(Transform.X, -Half.X, Half.X), 
                    Clamp(Transform.Y, -Half.Y, Half.Y), 
                    Clamp(Transform.Z, -Half.Z, Half.Z)
                )
            end

            -- Check distance to the nearest point
            local Distance = (HitPosition - NearestPoint).Magnitude
            if Distance < MinDistance then
                MinDistance = Distance
                NearestPosition = NearestPoint
            end
        end
    end

    return NearestPosition
end

-- Kalman Filter Implementation
local Smoothing = p['Silent Aim']['Resolver']['Smoothing']
local Process = p['Silent Aim']['Resolver']['Process']
local Measurement = p['Silent Aim']['Resolver']['Measurement']
local Estimate = p['Silent Aim']['Resolver']['Estimate']
local Gain = 0

local Data = {
    Position = Vector3.new(0, 0, 0),
    Velocity = Vector3.new(0, 0, 0),
    Acceleration = Vector3.new(0, 0, 0)
}

local function CalculateKalman(deltaTime, CurrentPosition, PreviousPosition, PreviousVelocity, PreviousAcceleration)
    local CurrentVelocity = (CurrentPosition - PreviousPosition) / deltaTime
    local PredictedPosition = PreviousPosition + Data.Velocity * deltaTime
    local PredictedVelocity = PreviousVelocity

    Gain = Estimate / (Estimate + Measurement)

    local CorrectedPosition = PredictedPosition + Gain * (CurrentPosition - PredictedPosition)
    local CorrectedVelocity = PredictedVelocity + Gain * (CurrentVelocity - PredictedVelocity)
    Estimate = (1 - Gain) * Estimate + Process

    local Alpha = Smoothing / (Smoothing + deltaTime)
    local SmoothedVelocity = Data.Velocity + Alpha * (CorrectedVelocity - Data.Velocity)
    local SmoothedAcceleration = Alpha * Data.Acceleration + (1 - Alpha) * (SmoothedVelocity - Data.Velocity) / deltaTime

    return SmoothedVelocity, SmoothedAcceleration
end

local function BuildVelocity(deltaTime, Target)
    if Target and Target.Character then
        local CurrentPosition = Target.Character.HumanoidRootPart.Position
        local CurrentVelocity, CurrentAcceleration = CalculateKalman(
            deltaTime, CurrentPosition, Data.Position, Data.Velocity, Data.Acceleration
        )

        Data.Position = CurrentPosition
        Data.Velocity = CurrentVelocity
        Data.Acceleration = CurrentAcceleration

        return CurrentVelocity
    end
end

-- Update velocity using the resolver in RenderStepped
rs.RenderStepped:Connect(function(deltaTime)
    if p['Silent Aim']['Resolver'].Enabled and SilentTarget then
        BuildVelocity(deltaTime, SilentTarget)
    end
end)

-- Other parts of the Silent Aim logic (unchanged)
local renderSteppedConnection = rs.RenderStepped:Connect(function()
    Circle.Visible = p['Silent Aim']['Field Of View'].Visible
    Circle.Color = p['Silent Aim']['Field Of View'].Color
    Circle.Radius = p['Silent Aim']['Field Of View'].Radius
    Circle.Transparency = p['Silent Aim']['Field Of View'].Transparency
    Circle.Position = Vector2.new(m.X, m.Y + (game:GetService("GuiService"):GetGuiInset().Y))
end)

table.insert(getgenv().NasEbk_Connections, renderSteppedConnection)

local function Flags(Plr)
    local Dead = nil
    if Plr and Plr.Character and game.PlaceId == 2788229376 or 7213786345 or 16033173781 or 9825515356 and p.KOCheck then
        if Plr.Character:FindFirstChild("BodyEffects") then
            if Plr.Character.BodyEffects:FindFirstChild("K.O") then
                Dead = Plr.Character.BodyEffects["K.O"].Value
            elseif Plr.Character.BodyEffects:FindFirstChild("KO") then
                Dead = Plr.Character.BodyEffects.KO.Value
            end
        end
    end
    return Dead
end

local function GetClosestPlr()
    local ClosestTarget = nil
    local MaxDistance = math.huge

    for _, index in pairs(players:GetPlayers()) do
        if index.Name ~= lp.Name and index.Character and index.Character:FindFirstChild("HumanoidRootPart") then
            local Position, OnScreen = c:WorldToScreenPoint(index.Character.HumanoidRootPart.Position)
            local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(m.X, m.Y)).Magnitude

            if not OnScreen then
                continue
            end

            if Circle.Radius > Distance and Distance < MaxDistance then
                ClosestTarget = index
                MaxDistance = Distance
            end
        end
    end
    return ClosestTarget
end

local renderSteppedSilentAimConnection = rs.RenderStepped:Connect(function()
    if p['Silent Aim'].Enabled then
        SilentTarget = GetClosestPlr()
    end
end)

table.insert(getgenv().NasEbk_Connections, renderSteppedSilentAimConnection)

local function args()
    local arg = nil

    if game.PlaceId == 2788229376 then
        arg = "UpdateMousePosI"
    elseif game.PlaceId == 16033173781 then
        arg = "UpdateMousePosI"
    elseif game.PlaceId == 7213786345 then
        arg = "UpdateMousePosI"
    elseif game.PlaceId == 9825515356 then
        arg = "MousePosUpdate"
    elseif game.PlaceId == 15186202290 then
        arg = "MOUSE"
    else
        arg = "MOUSE"
    end

    return arg
end

local function Velocity(Plr, Part)
    return Plr.Character[Part].Velocity
end

local OldPart = p['Silent Aim'].Part
local function SilentMain(index)
    local Event = game.ReplicatedStorage:FindFirstChild("MAINEVENT")
    local Arguements = args()
    if index:IsA("Tool") then
        index.Activated:Connect(function()
            if SilentTarget and SilentTarget.Character and Event and not Flags(SilentTarget) then
                if p['Silent Aim'].EnableJumpPart then
                    if SilentTarget.Character[p['Silent Aim'].Part].Velocity.Y < -20 then
                        p['Silent Aim'].Part = p['Silent Aim'].JumpPart
                    else
                        p['Silent Aim'].Part = OldPart
                    end
                end

                local EndPosition
                if p['Silent Aim']['Nearest Point'] then
                    EndPosition = GetNearestPointOnTarget(SilentTarget)
                else
                    EndPosition = SilentTarget.Character[p['Silent Aim'].Part].Position
                end

                EndPosition = EndPosition + Velocity(SilentTarget, p['Silent Aim'].Part) * p['Silent Aim'].Prediction
                Event:FireServer(Arguements, EndPosition)
            end
        end)
    end
end

local function onCharacterAdded(character)
    character.ChildAdded:Connect(SilentMain)
    for _, tool in pairs(character:GetChildren()) do
        SilentMain(tool)
    end
end

local characterAddedConnection = lp.CharacterAdded:Connect(onCharacterAdded)

table.insert(getgenv().NasEbk_Connections, characterAddedConnection)

if lp.Character then
    onCharacterAdded(lp.Character)
end
